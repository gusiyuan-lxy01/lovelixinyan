<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>贪吃蛇游戏</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #f0f0f0;
            margin: 0;
            padding: 20px;
            touch-action: manipulation;
        }
        
        #game-container {
            position: relative;
            margin: 20px auto;
        }
        
        #game-canvas {
            border: 2px solid #333;
            background-color: #fff;
            display: block;
            max-width: 100%;
        }
        
        #controls {
            margin: 10px 0;
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 10px;
        }
        
        button {
            padding: 10px 20px;
            font-size: 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        button:hover {
            background-color: #45a049;
        }
        
        #score {
            font-size: 20px;
            margin: 10px 0;
        }
        
        #mobile-controls {
            display: none;
            margin-top: 10px;
            width: 100%;
            max-width: 300px;
        }
        
        .direction-btn {
            width: 60px;
            height: 60px;
            font-size: 24px;
            background-color: #2196F3;
            margin: 5px;
        }
        
        .direction-row {
            display: flex;
            justify-content: center;
        }
        
        #message {
            font-size: 24px;
            color: #e91e63;
            font-weight: bold;
            margin: 10px 0;
            text-align: center;
            min-height: 30px;
        }
        
        @media (max-width: 768px) {
            #mobile-controls {
                display: block;
            }
            
            #game-canvas {
                width: 100%;
                height: auto;
            }
        }
    </style>
</head>
<body>
    <h1>贪吃蛇游戏</h1>
    <div id="message"></div>
    <div id="score">分数: 0</div>
    <div id="game-container">
        <canvas id="game-canvas" width="400" height="400"></canvas>
    </div>
    <div id="controls">
        <button id="start-btn">开始游戏</button>
        <button id="restart-btn">重新开始</button>
    </div>
    
    <div id="mobile-controls">
        <div class="direction-row">
            <button class="direction-btn" id="up-btn">↑</button>
        </div>
        <div class="direction-row">
            <button class="direction-btn" id="left-btn">←</button>
            <button class="direction-btn" id="down-btn">↓</button>
            <button class="direction-btn" id="right-btn">→</button>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('game-canvas');
        const ctx = canvas.getContext('2d');
        const scoreDisplay = document.getElementById('score');
        const messageDisplay = document.getElementById('message');
        const startBtn = document.getElementById('start-btn');
        const restartBtn = document.getElementById('restart-btn');
        
        // 移动端控制按钮
        const upBtn = document.getElementById('up-btn');
        const downBtn = document.getElementById('down-btn');
        const leftBtn = document.getElementById('left-btn');
        const rightBtn = document.getElementById('right-btn');
        
        // 游戏参数
        const gridSize = 20;
        const tileCount = canvas.width / gridSize;
        let snake = [];
        let food = {};
        let direction = 'right';
        let nextDirection = 'right';
        let gameRunning = false;
        let score = 0;
        let gameSpeed = 150;
        let gameLoop;
        
        // 初始化游戏
        function initGame() {
            snake = [
                {x: 5, y: 10},
                {x: 4, y: 10},
                {x: 3, y: 10}
            ];
            
            direction = 'right';
            nextDirection = 'right';
            score = 0;
            scoreDisplay.textContent = `分数: ${score}`;
            messageDisplay.textContent = '';
            generateFood();
        }
        
        // 生成食物
        function generateFood() {
            food = {
                x: Math.floor(Math.random() * tileCount),
                y: Math.floor(Math.random() * tileCount)
            };
            
            // 确保食物不会出现在蛇身上
            for (let segment of snake) {
                if (segment.x === food.x && segment.y === food.y) {
                    return generateFood();
                }
            }
        }
        
        // 绘制游戏
        function draw() {
            // 清空画布
            ctx.fillStyle = '#fff';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // 绘制蛇
            ctx.fillStyle = '#4CAF50';
            for (let segment of snake) {
                ctx.fillRect(segment.x * gridSize, segment.y * gridSize, gridSize - 1, gridSize - 1);
            }
            
            // 绘制蛇头（不同颜色）
            ctx.fillStyle = '#2E7D32';
            const head = snake[0];
            ctx.fillRect(head.x * gridSize, head.y * gridSize, gridSize - 1, gridSize - 1);
            
            // 绘制食物
            ctx.fillStyle = '#e91e63';
            ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize - 1, gridSize - 1);
        }
        
        // 更新游戏状态
        function update() {
            // 更新方向
            direction = nextDirection;
            
            // 获取蛇头
            const head = {x: snake[0].x, y: snake[0].y};
            
            // 根据方向移动蛇头
            switch (direction) {
                case 'up':
                    head.y -= 1;
                    break;
                case 'down':
                    head.y += 1;
                    break;
                case 'left':
                    head.x -= 1;
                    break;
                case 'right':
                    head.x += 1;
                    break;
            }
            
            // 检查是否撞墙
            if (head.x < 0 || head.x >= tileCount || head.y < 0 || head.y >= tileCount) {
                gameOver();
                return;
            }
            
            // 检查是否撞到自己
            for (let i = 0; i < snake.length; i++) {
                if (head.x === snake[i].x && head.y === snake[i].y) {
                    gameOver();
                    return;
                }
            }
            
            // 将新头部添加到蛇身
            snake.unshift(head);
            
            // 检查是否吃到食物
            if (head.x === food.x && head.y === food.y) {
                score += 10;
                scoreDisplay.textContent = `分数: ${score}`;
                
                // 检查是否通关
                if (score >= 100) {
                    gameWin();
                    return;
                }
                
                // 随着分数增加加快游戏速度
                if (score % 30 === 0 && gameSpeed > 50) {
                    gameSpeed -= 10;
                    clearInterval(gameLoop);
                    gameLoop = setInterval(gameStep, gameSpeed);
                }
                
                generateFood();
            } else {
                // 如果没有吃到食物，移除尾部
                snake.pop();
            }
        }
        
        // 游戏胜利
        function gameWin() {
            clearInterval(gameLoop);
            gameRunning = false;
            messageDisplay.textContent = '恭喜通关，老婆你最棒';
            startBtn.textContent = '重新开始';
        }
        
        // 游戏结束
        function gameOver() {
            clearInterval(gameLoop);
            gameRunning = false;
            messageDisplay.textContent = '游戏结束!';
            startBtn.textContent = '重新开始';
        }
        
        // 游戏步骤
        function gameStep() {
            update();
            draw();
        }
        
        // 开始游戏
        function startGame() {
            if (gameRunning) return;
            
            initGame();
            gameRunning = true;
            startBtn.textContent = '游戏中...';
            gameLoop = setInterval(gameStep, gameSpeed);
        }
        
        // 重新开始游戏
        function restartGame() {
            clearInterval(gameLoop);
            initGame();
            gameRunning = true;
            startBtn.textContent = '游戏中...';
            gameSpeed = 150;
            gameLoop = setInterval(gameStep, gameSpeed);
        }
        
        // 键盘控制
        document.addEventListener('keydown', (e) => {
            if (!gameRunning) return;
            
            switch (e.key) {
                case 'ArrowUp':
                    if (direction !== 'down') nextDirection = 'up';
                    break;
                case 'ArrowDown':
                    if (direction !== 'up') nextDirection = 'down';
                    break;
                case 'ArrowLeft':
                    if (direction !== 'right') nextDirection = 'left';
                    break;
                case 'ArrowRight':
                    if (direction !== 'left') nextDirection = 'right';
                    break;
            }
        });
        
        // 移动端触摸控制
        upBtn.addEventListener('click', () => {
            if (gameRunning && direction !== 'down') nextDirection = 'up';
        });
        
        downBtn.addEventListener('click', () => {
            if (gameRunning && direction !== 'up') nextDirection = 'down';
        });
        
        leftBtn.addEventListener('click', () => {
            if (gameRunning && direction !== 'right') nextDirection = 'left';
        });
        
        rightBtn.addEventListener('click', () => {
            if (gameRunning && direction !== 'left') nextDirection = 'right';
        });
        
        // 按钮事件
        startBtn.addEventListener('click', startGame);
        restartBtn.addEventListener('click', restartGame);
        
        // 初始绘制
        initGame();
        draw();
    </script>
</body>
</html>
